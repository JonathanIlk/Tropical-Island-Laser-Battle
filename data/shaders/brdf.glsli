#pragma once

#ifndef BRDF_GLSL_I_
#define BRDF_GLSL_I_

#include "math.glsli"

// Constant normal incidence Fresnel factor for all dielectrics.
#define M_F_DIELECTRIC 0.04f

float get_pointlight_contrib(vec3 normal, vec3 worldpos, vec3 lightpos)
{
    const vec3 L = normalize(lightpos - worldpos);
    return saturate(dot(normal, L));
}

// GGX/Towbridge-Reitz normal distribution function.
// Uses Disney's reparametrization of alpha = roughness^2.
float ndfGGX(float cosLh, float roughness)
{
	float alpha   = roughness * roughness;
	float alphaSq = alpha * alpha;

	float denom = (cosLh * cosLh) * (alphaSq - 1.0) + 1.0;
	return alphaSq / (M_PI * denom * denom);
}

// Single term for separable Schlick-GGX below.
float gaSchlickG1(float cosTheta, float k)
{
	return cosTheta / (cosTheta * (1.0 - k) + k);
}

// Schlick-GGX approximation of geometric attenuation function using Smith's method.
float gaSchlickGGX(float cosLi, float cosLo, float roughness)
{
	float r = roughness + 1.0;
	float k = (r * r) / 8.0; // Epic suggests using this roughness remapping for analytic lights.
	return gaSchlickG1(cosLi, k) * gaSchlickG1(cosLo, k);
}

// Shlick's approximation of the Fresnel factor.
vec3 fresnelSchlick(vec3 F0, float cosTheta)
{
	return F0 + (1.0 - F0) * pow5(1.0 - cosTheta);
}

vec3 calculateDirectLight(vec3 Li, vec3 Lo, float cosLo, vec3 Lradiance, vec3 N, vec3 F0, float mat_ao, float roughness, float metalness, vec3 albedo)
{
    // Half-vector between Li and Lo.
    vec3 Lh = normalize(Li + Lo);

    // Calculate angles between surface normal and various light vectors.
    float cosLi = saturate(dot(N, Li));
    float cosLh = saturate(dot(N, Lh));

    // Calculate Fresnel term for direct lighting. 
    vec3 F = fresnelSchlick(F0, saturate(dot(Lh, Lo)));
    // Calculate normal distribution for specular BRDF.
    float D = ndfGGX(cosLh, roughness);
    // Calculate geometric attenuation for specular BRDF.
    float G = gaSchlickGGX(cosLi, cosLo, roughness);

    // Diffuse scattering happens due to light being refracted multiple times by a dielectric medium.
    // Metals on the other hand either reflect or absorb energy, so diffuse contribution is always zero.
    // To be energy conserving we must scale diffuse BRDF contribution based on Fresnel factor & metalness.
    vec3 kd = lerp(vec3(1, 1, 1) - F, vec3(0, 0, 0), metalness);

    // Lambert diffuse BRDF.
    // We don't scale by 1/PI for lighting & material units to be more convenient.
    // See: https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/
    vec3 diffuseBRDF = kd * albedo;

    // Cook-Torrance specular microfacet BRDF.
    vec3 specularBRDF = (F * D * G) / max(M_FLOAT_EPS, 4.0 * cosLi * cosLo);

    // Total contribution for this light
    return (diffuseBRDF + specularBRDF) * Lradiance * cosLi;
}

vec3 calculateIndirectDiffuseLight(vec3 diffuseIrradiance, vec3 F0, float cosLo, vec3 N, vec3 Lo, float metalness, float mat_ao, vec3 albedo)
{
    vec3 F = fresnelSchlick(F0, cosLo);
	vec3 Lr = 2.0 * cosLo * N - Lo;
    vec3 kd = lerp(1.0 - F, vec3(0.0), metalness);
    return (kd * albedo * diffuseIrradiance * mat_ao) / M_PI;
}

#endif