#include "Editor.hh"

#include <typed-geometry/tg.hh>

#include "transform.hh"

void gamedev::manipulateTransform(EditorState& state, tg::mat4 const& view, tg::mat4 const& proj, transform& inoutTransform)
{
    tg::mat4 mat = affine_to_mat4(inoutTransform.transform_mat());

    // run imguizmo on mat
    {
        if (ImGui::Begin("Editor"))
        {
            if (ImGui::RadioButton("Move", state.operation == ImGuizmo::OPERATION::TRANSLATE))
                state.operation = ImGuizmo::OPERATION::TRANSLATE;
            ImGui::SameLine();
            if (ImGui::RadioButton("Rotate", state.operation == ImGuizmo::OPERATION::ROTATE))
                state.operation = ImGuizmo::OPERATION::ROTATE;
            ImGui::SameLine();
            if (ImGui::RadioButton("Scale", state.operation == ImGuizmo::OPERATION::SCALE))
                state.operation = ImGuizmo::OPERATION::SCALE;

            bool is_local = state.mode == ImGuizmo::MODE::LOCAL || state.operation == ImGuizmo::OPERATION::SCALE;
            if (ImGui::RadioButton("Local", is_local))
                state.mode = ImGuizmo::MODE::LOCAL;
            ImGui::SameLine();
            if (ImGui::RadioButton("World", !is_local))
                state.mode = state.operation == ImGuizmo::OPERATION::SCALE ? ImGuizmo::MODE::LOCAL : ImGuizmo::MODE::WORLD;

            ImGui::Separator();

            float pos[3];
            float rot[3];
            float scl[3];
            ImGuizmo::DecomposeMatrixToComponents(tg::data_ptr(mat), pos, rot, scl);

            bool changes = false;

            if (ImGui::InputFloat3("Position", pos))
                changes = true;
            if (ImGui::InputFloat3("Rotation", rot))
                changes = true;
            if (ImGui::InputFloat3("Scale", scl))
                changes = true;

            if (changes)
                ImGuizmo::RecomposeMatrixFromComponents(pos, rot, scl, tg::data_ptr(mat));
        }
        ImGui::End();

        state.mode = state.operation == ImGuizmo::OPERATION::SCALE ? ImGuizmo::MODE::LOCAL : state.mode;
        ImGuizmo::Manipulate(tg::data_ptr(view), tg::data_ptr(proj), state.operation, state.mode, tg::data_ptr(mat));
    }

    // re-assemble transform
    tg::mat3 rotation;
    tg::decompose_transformation(mat, inoutTransform.translation, rotation, inoutTransform.scaling);
    inoutTransform.rotation = tg::quat::from_rotation_matrix(rotation);
}
