#pragma once

#ifndef MATH_GLSL_I_
#define MATH_GLSL_I_

#ifndef M_PI
#define M_PI 3.141592f
#endif

#define M_FLOAT_EPS         1.192092896e-07F // smallest such that 1.0+FLT_EPSILON != 1.0
#define M_UINT_MAX          4294967295u
#define M_FLOAT_MAX         3.402823466e+38F

// clamp to zero if very small
float floor_epsilon(float v) { return abs(v) < M_FLOAT_EPS ? 0.f : v; }

// ---------------------------------------------------------------
// basics - HLSL compat
// ---------------------------------------------------------------

float saturate(float x) { return clamp(x, 0.0, 1.0); }
vec2 saturate(vec2 x) { return clamp(x, vec2(0.0), vec2(1.0)); }
vec3 saturate(vec3 x) { return clamp(x, vec3(0.0), vec3(1.0)); }
vec4 saturate(vec4 x) { return clamp(x, vec4(0.0), vec4(1.0)); }

float lerp(float x, float y, float s) { return mix(x,y,s); }
vec2 lerp(vec2 x, vec2 y, vec2 s) { return mix(x,y,s); }
vec3 lerp(vec3 x, vec3 y, vec3 s) { return mix(x,y,s); }
vec3 lerp(vec3 x, vec3 y, float s) { return mix(x,y,vec3(s)); }
vec4 lerp(vec4 x, vec4 y, vec4 s) { return mix(x,y,s); }
vec4 lerp(vec4 x, vec4 y, float s) { return mix(x,y,vec4(s)); }

bool any(vec2 x) { return x.x > 0.0 || x.y > 0.0; }
bool any(vec3 x) { return x.x > 0.0 || x.y > 0.0 || x.z > 0.0; }
bool any(vec4 x) { return x.x > 0.0 || x.y > 0.0 || x.z > 0.0 || x.w > 0.0; }

// ---------------------------------------------------------------
// basics - float
// ---------------------------------------------------------------

float  max3(float  x, float  y, float  z) { return max(x, max(y, z)); }
vec2 max3(vec2 x, vec2 y, vec2 z) { return max(x, max(y, z)); }
vec3 max3(vec3 x, vec3 y, vec3 z) { return max(x, max(y, z)); }
vec4 max3(vec4 x, vec4 y, vec4 z) { return max(x, max(y, z)); }

float  min3(float  x, float  y, float  z) { return min(x, min(y, z)); }
vec2 min3(vec2 x, vec2 y, vec2 z) { return min(x, min(y, z)); }
vec3 min3(vec3 x, vec3 y, vec3 z) { return min(x, min(y, z)); }
vec4 min3(vec4 x, vec4 y, vec4 z) { return min(x, min(y, z)); }

// returns the middle of the three values
float  median(float a, float b, float c) { return max(min(a,b), min(max(a,b),c)); }

float length2(vec2 vec) { return dot(vec, vec); }
float length2(vec3 vec) { return dot(vec, vec); }
float length2(vec4 vec) { return dot(vec, vec); }

float  pow2(float  x) { return x*x; }
vec2 pow2(vec2 x) { return x*x; }
vec3 pow2(vec3 x) { return x*x; }
vec4 pow2(vec4 x) { return x*x; }

float  pow3(float  x) { return x*x*x; }
vec2 pow3(vec2 x) { return x*x*x; }
vec3 pow3(vec3 x) { return x*x*x; }
vec4 pow3(vec4 x) { return x*x*x; }

float  pow4(float  x) { float  xx = x*x; return xx * xx; }
vec2 pow4(vec2 x) { vec2 xx = x*x; return xx * xx; }
vec3 pow4(vec3 x) { vec3 xx = x*x; return xx * xx; }
vec4 pow4(vec4 x) { vec4 xx = x*x; return xx * xx; }

float  pow5(float  x) { float  xx = x*x; return xx * xx * x; }
vec2 pow5(vec2 x) { vec2 xx = x*x; return xx * xx * x; }
vec3 pow5(vec3 x) { vec3 xx = x*x; return xx * xx * x; }
vec4 pow5(vec4 x) { vec4 xx = x*x; return xx * xx * x; }

float  pow6(float  x) { float  xx = x*x; return xx * xx * xx; }
vec2 pow6(vec2 x) { vec2 xx = x*x; return xx * xx * xx; }
vec3 pow6(vec3 x) { vec3 xx = x*x; return xx * xx * xx; }
vec4 pow6(vec4 x) { vec4 xx = x*x; return xx * xx * xx; }

// ---------------------------------------------------------------
// basics - int
// ---------------------------------------------------------------

// Divide ints and round up, nom > 0, denom > 0
int int_div_ceil(int nom, int denom) { return 1 + ((nom - 1) / denom); }
uint uint_div_ceil(uint nom, uint denom) { return 1 + ((nom - 1) / denom); }

#endif
